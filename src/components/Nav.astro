---

---

<nav>
  <div class="container nav-container">
    <a href="/" class="logo-link" aria-label="Go to homepage">
    <!-- Logo -->

    </a>
    <div class="nav-wrapper">
      <button class="btn btn--menu" id="menu-btn" aria-expanded="false" aria-controls="menu" aria-label="Open mobile nav">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" fill="none" viewBox="0 0 24 24" stroke="currentColor"
          stroke-width="4">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 8h16M4 16h16" />
        </svg>
      </button>
      <ul role="menubar" class="nav-links" id="menu">
        <li role="none">
          <a role="menuitem" href="/" class="nav-link btn">Book</a>
        </li>
        <li role="none">
          <a role="menuitem" href="/stories" class="nav-link btn">Stories</a>
        </li>
        <li role="none">
          <a role="menuitem" href="/authors" class="nav-link btn">Authors</a>
        </li>
        <li role="none">
          <a role="menuitem" href="/#presale" class="nav-link btn btn--accent">Order</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<style>
nav {
  position: fixed;
  z-index: 10;
  width: 100%;
  padding-block: 1.2rem;
  background-color: transparent;
  transition: background-color 800ms cubic-bezier(0.64, 0.04, 0.26, 0.87);
}

nav.active {
  background-color: hsl(var(--color-theme-50));
}

.nav-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logo {
  color: hsl(var(--color-theme-900));
  margin-inline: 2rem;
  width: clamp(3rem, 5vw, 7.5rem);
  display: grid;
  place-items: center;
}

.logo-link:focus-visible,
.nav-link:focus-visible {
  outline: 4px solid hsl(var(--color-theme-100));
  outline-offset: 0.2em;
  border-radius: 0.5rem;
}

.nav-links {
  display: flex;
  align-items: center;
  flex-direction: column;
  gap: 1.5rem;
  transform: translate3d(0, -200%, 0);
  position: absolute;
  z-index: -1;
  top: 3rem;
  left: 0;
  right: 0;
  background-color: hsl(var(--color-theme));
  padding: 1.5rem;
  border-bottom: 2px solid hsl(var(--color-theme-50));
  text-align: center;
}

.nav-links.activated {
  transition: transform 0.4s cubic-bezier(0.64, 0.04, 0.26, 0.87);
}

.btn {
  color: hsl(var(--color-theme-900));
  text-decoration: none;
  padding: 0.3rem 1.5rem;
  cursor: pointer;
  border-radius: 0.5rem;
}

.btn--accent {
  background-color: hsl(var(--color-theme-200));
  padding: 0.3rem 2rem;
}

.btn--menu {
  color: hsl(var(--color-theme-900));
  background-color: transparent;
  border: none;
  display: grid;
  place-items: center;
  padding-inline: 1rem;
  transition: transform 0.3s cubic-bezier(0.64, 0.04, 0.26, 0.87);
}

li[role="none"],
.nav-link {
  width: 100%;
  display: block;
  font-size: 1.1rem;
  text-transform: uppercase;
}

.btn--menu[aria-expanded="true"] {
  transform: rotate(-180deg);
}

.btn--menu[aria-expanded="true"] + .nav-links {
  transform: translate3d(0, 0, 0);
}

@media (min-width: 768px) {
  .btn--menu {
    display: none;
  }
  .nav-links {
    position: static;
    transform: translate3d(0, 0, 0);
    flex-direction: row;
    border: 0;
    z-index: 0;
    padding: 0;
    inset: 0;
    background-color: transparent;
  }
  li[role="none"],
  .nav-link {
    width: initial;
  }
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
</style>

<script>
    const navBtn = document.querySelector('#menu-btn');
    const nav = document.querySelector('nav');
    const navLinks = document.querySelector('.nav-links');

    navBtn.addEventListener('click', () => {
    navLinks.classList.add('activated');
    const isExpanded = JSON.parse(navBtn.getAttribute('aria-expanded'));
    navBtn.setAttribute('aria-expanded', !isExpanded);
    !isExpanded && nav.classList.add('active');
    })

    //INTERSECTION OBSERVER

    const navObs = new IntersectionObserver((entries) => nav.classList.toggle('active', !entries[0].isIntersecting)
    , {threshold: .85})

    navObs.observe(document.querySelector('header'));

    const fadeUpObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if(entry.isIntersecting){
        entry.target.classList.add('faded');
        fadeUpObserver.unobserve(entry.target)
        }
    })
    }, {
    rootMargin: '-15%'
    })

    document.querySelectorAll('.fade-up').forEach(el => {
    fadeUpObserver.observe(el);
    })
</script>